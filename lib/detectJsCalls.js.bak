//exports.detectJCalls = function(code) {
var re = require("recast");
var fs = require('fs');
var ob = require('./objectKeysVals');
var traverse = require("ast-traverse");
const _ = require("underscore");
//import * as babylon from "babylon";

var tr= require("babel-traverse");



fs.readFile('./test.js', function (err, content){
 if (err) throw err;
var ast = re.parse(content);
//Traverse everything
/*

traverse(ast, {pre: function(node, parent, prop, idx) {
    console.log(node.type + (parent ? " from parent " + parent.type +
        " via " + prop + (idx !== undefined ? "[" + idx + "]" : "") : ""));
}});
*/
//console.dir(ast,{depth:null, colors: true});




tr(ast, {pre: function(node) {

//Returned Require!
/*
   if(node.type === "CallExpression"){
    if(node.callee.type==="Identifier"){
     console.log(node.callee.name);}
}
 */
//var p = node.find(parent => parent.isCallExpression);
//console.dir(p);

 visitor: {
      Identifier(path) {
        var p = path.find(parent => parent.isCallExpression);
        console.log(p.node.name);
      }}


   
  }});

//console.dir(value, {depth:null, colors: true});
}
);









// }
