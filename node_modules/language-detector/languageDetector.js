/**
 * Removes all diacritics from a string
 * 
 * @see "what?" version ... http://jsperf.com/diacritics/12
 * 
 * @param  {string} string A string to clean
 * 
 * @return {string}        String without diacritic
 */
function removeDiacritics(string)
{
  return string.replace(/[^\u0000-\u007E]/g, function(a) { return diacriticsMap[a] || a; });
}

/**
 * Detects the language used in the provided string
 * 
 * @param  {string}       text The text to analyse
 * @return {string|false}      A two characters long language code (en, fr, pt...)
 *                             or FALSE in case of failure
 */
function detectLanguage(text)
{
  // We lower the text case
  text = text.toLowerCase();

  // We remove diacritics from the text
  text = removeDiacritics(text);

  // We get rid of non-alphanumeric characters
  text = text.replace(/[^\w\s]|_/g, ' ');
  
  // We add a space at the beginning and at the end
  text = ' ' + text + ' ';
  
  // We get rid of duplicate spaces
  text = text.replace(/\s+/g, ' ');
  
  var textLanguageCode;
  var textLanguageProbability = 0;
  var textLength = text.length;

  // We find the occurence ratio for each trigramm of each language
  for (var language in languagesNgrams)
  {
    var iMax = languagesNgrams[language].length;
    trigramsTotalRatio = 0;

    for (var i=0; i<iMax; i++)
    {
      var regexString = languagesNgrams[language][i].replace(/\s/g, '\\s');
      var regex = new RegExp(regexString, 'g');

      trigramsTotalRatio += languagesNgrams[language][i].length * (text.match(regex) || []).length / textLength;
    }

    if (trigramsTotalRatio > textLanguageProbability)
    {
      textLanguageCode = language;
      textLanguageProbability = trigramsTotalRatio;
    }
  }

  return textLanguageCode || false;
}
